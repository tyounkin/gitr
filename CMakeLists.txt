cmake_minimum_required (VERSION 2.6)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/CMake/)
#set(CMAKE_MODULE_PATH /Users/tyounkin/Code/gitr_test_algorithms/libconfig/CMake/)
set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
#link_directories(/usr/local/lib)
project (Tutorial C CXX)
#list(APPEND CMAKE_PREFIX_PATH "/usr/local/include" "/usr/local/lib")
find_package(LibConfig REQUIRED)
IF (LIBCONFIG_FOUND)
  include_directories(${LIBCONFIGPP_INCLUDE_DIR})
  message( STATUS "LibConfig found: " ${LIBCONFIGPP_INCLUDE_DIR} )
endif()
find_package(NetCDF COMPONENTS CXX REQUIRED)
#include_directories("/usr/local/include")
include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${THRUST_INCLUDE_DIR})
include_directories(${NETCDF_INCLUDE_DIRS})
include_directories(${CPPFLAGS})
find_package(HDF5 1.12 REQUIRED)
find_package(MPI)
if(MPI_FOUND)
  include_directories(SYSTEM ${MPI_INCLUDE_PATH})
  message( STATUS "MPI found: " ${MPI_INCLUDE_PATH} )
endif()
#include_directories("/Users/tyounkin/anaconda2/pkgs/libcxx-4.0.1-h579ed51_0/lib/")
message( STATUS "netCDF include dir: " ${NETCDF_INCLUDE_DIRS})
message( STATUS "netcdf c lib: " ${NETCDF_C_LIBRARIES})
message( STATUS "netcdf cxx lib: " ${NETCDF_CXX_LIBRARIES})
add_definitions(-DUSE_PARALLEL -DHAS_NETCDF_PAR_H)
file( GLOB SOURCE_FILES src/file_io.cpp src/Field.cpp)
file( GLOB HEADER_FILES src/*.hpp )
add_library(YourLib ${SOURCE_FILES} ${HEADER_FILES} )
#ADD_EXECUTABLE(Tutorial src/main.cpp)
#ADD_EXECUTABLE(tests src/file_io_tests.cpp)

#FILE(GLOB SRCFILES src/*.cpp)
file(GLOB SRC_FILES src/main.cpp)
ADD_EXECUTABLE(Tutorial ${SRC_FILES} ${HEADER_FILES})
ADD_EXECUTABLE(tests src/file_io_tests.cpp ${HEADER_FILES})
#target_include_directories(Tutorial PRIVATE src)
find_package(OpenMP REQUIRED)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} --std=c++17 -O3") # -lstdc++fs") #-stdlib=libc++") # -lstdc++fs")
set_source_files_properties(src/main.cpp PROPERTIES LANGUAGE CXX)
add_definitions("-x c++ -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_OMP"    )
add_definitions(-DUSE_DOUBLES=${USE_DOUBLES})
set_target_properties(Tutorial PROPERTIES LINKER_LANGUAGE CXX)
target_link_libraries(Tutorial ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(Tutorial YourLib)
target_link_libraries(tests ${LIBCONFIGPP_LIBRARIES})
target_link_libraries(tests YourLib)
target_link_libraries(Tutorial ${NETCDF_C_LIBRARIES})
target_link_libraries(Tutorial ${NETCDF_CXX_LIBRARIES})
target_link_libraries(tests ${NETCDF_C_LIBRARIES})
target_link_libraries(tests ${NETCDF_CXX_LIBRARIES})
target_link_libraries(Tutorial ${MPI_C_LIBRARIES})
target_link_libraries(Tutorial ${MPI_CXX_LIBRARIES})
target_link_libraries(tests ${MPI_C_LIBRARIES})
target_link_libraries(tests ${MPI_CXX_LIBRARIES})
target_link_libraries(Tutorial ${LDFLAGS})
target_link_libraries(tests ${LDFLAGS})
target_link_libraries(Tutorial "/Users/tqd/Code/hdf5_build/lib/libhdf5_hl.dylib")
target_link_libraries(Tutorial "/Users/tqd/opt/anaconda3/lib/libcurl.dylib")
target_link_libraries(tests "/Users/tqd/Code/hdf5_build/lib/libhdf5_hl.dylib")
target_link_libraries(tests "/Users/tqd/opt/anaconda3/lib/libcurl.dylib")
